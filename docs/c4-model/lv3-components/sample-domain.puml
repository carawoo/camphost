@startuml
' ==============================================================================
' [Level 3] Component - sample-domain Package
' ==============================================================================
' Package: @pioncorp/sample-domain
' Description: sample-domain 패키지 내부의 주요 컴포넌트
'
' 🔗 코드 경로:
'    • packages/sample-domain/src/
'    • packages/sample-domain/src/user/
'    • packages/sample-domain/src/notification/
'    • packages/sample-domain/src/file-storage/
'
' 🔄 동기화 규칙:
'    ✅ lv2 (overview.puml) - sample-domain 컨테이너 설명 확인
'    ✅ lv4 (user-service.puml, notification-*.puml) 변경 시 이 다이어그램 확인
'    ✅ 새로운 컴포넌트(Service/Provider) 추가 시 이 다이어그램 업데이트
'
' 📍 변경 대상:
'    • Component - Service/Provider 추가/제거
'    • Rel - 컴포넌트 간 관계 변경
'    • ComponentDb - 스토리지 추가/제거
'
' 🔍 드릴다운:
'    • User Management → ../lv4-code/sample-domain/user.service.puml
'    • Notification Management → ../lv4-code/sample-domain/notification.service.puml
'    • File Storage Management → ../lv4-code/sample-domain/file-storage.service.puml
'
' ⬆️  Zoom Out: ../lv2-containers/overview.puml
' ==============================================================================

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

LAYOUT_WITH_LEGEND()

title [Level 3] Component - sample-domain Package

Container_Boundary(sample_domain, "@pioncorp/sample-domain") {

    ' ========== User Management Components ==========
    Component(user_component, "User Management", "Component", "사용자 CRUD 관리\n- 사용자 생성/조회/수정/삭제\n- In-Memory 저장")

    ' ========== File Storage Components ==========
    Component(file_storage_component, "File Storage Management", "Component", "개인 파일 스토리지\n- 업로드/다운로드/목록/수정/삭제\n- In-Memory 저장\n- 파일 크기/타입 검증\n- 권한 관리")

    ' ========== Notification Components ==========
    Component(notification_component, "Notification Management", "Component", "멀티채널 알림 발송\n- 채널: Email, SMS, Push, Kakao\n- Strategy Pattern 적용")

    Component(provider_strategy, "Provider Strategy", "Component", "알림 Provider 추상화\n- EmailProvider\n- SmsProvider\n- PushProvider\n- KakaoProvider")

    Component(console_providers, "Console Providers", "Component", "개발/테스트용 Provider\n- console.log 출력\n- 실제 발송 없음")

    Component(production_providers, "Production Providers", "Component", "프로덕션용 Provider\n- AWS SES (Email)\n- Twilio (SMS)\n- FCM (Push)\n- Kakao Talk API")

    ' ========== Storage Components ==========
    ComponentDb(user_store, "User Store", "In-Memory Map", "사용자 데이터 임시 저장\nMap<string, User>")

    ComponentDb(file_store, "File Store", "In-Memory Map", "파일 데이터 임시 저장\nMap<string, StoredFile>")

    ' ========== Shared Components ==========
    Component(di_registry, "DI Registry", "tsyringe", "의존성 주입 레지스트리\n- Singleton 관리\n- 생명주기 관리")
}

Container_Ext(shared_core, "shared-core", "Logger, Types")

System_Ext(email_api, "Email Service API")
System_Ext(sms_api, "SMS Service API")
System_Ext(push_api, "Push Service API")
System_Ext(kakao_api, "Kakao Service API")

' ========== Relationships ==========

' User Component
Rel(user_component, user_store, "CRUD 작업", "In-Memory")
Rel(user_component, shared_core, "로깅", "Logger")
Rel(user_component, di_registry, "등록/해소", "Singleton")

' File Storage Component
Rel(file_storage_component, file_store, "CRUD 작업", "In-Memory")
Rel(file_storage_component, shared_core, "로깅", "Logger")
Rel(file_storage_component, di_registry, "등록/해소", "Singleton")

' Notification Component
Rel(notification_component, provider_strategy, "알림 발송 위임", "Strategy Pattern")
Rel(notification_component, shared_core, "로깅", "Logger")
Rel(notification_component, di_registry, "등록/해소", "Singleton")

' Provider Strategy
Rel(provider_strategy, console_providers, "개발 환경", "Runtime Selection")
Rel(provider_strategy, production_providers, "프로덕션 환경", "Runtime Selection")

' Providers to External APIs
Rel(production_providers, email_api, "이메일 발송", "HTTPS/REST")
Rel(production_providers, sms_api, "SMS 발송", "HTTPS/REST")
Rel(production_providers, push_api, "푸시 발송", "HTTPS/REST")
Rel(production_providers, kakao_api, "알림톡 발송", "HTTPS/REST")

' DI Registry
Rel(di_registry, console_providers, "Injectable 등록", "Decorator")
Rel(di_registry, production_providers, "Injectable 등록", "Decorator")

SHOW_LEGEND()

note right of notification_component
  <b>Strategy Pattern</b>
  • 런타임에 Provider 교체 가능
  • 환경별 구현체 전환 (Dev/Prod)
  • 테스트 용이성 (Mock Provider)

  <b>🔍 Drill Down</b>
  → ../lv4-code/sample-domain/notification-service.puml
  → ../lv4-code/sample-domain/notification-providers.puml
end note

note bottom of user_component
  <b>🔍 Drill Down</b>
  → ../lv4-code/sample-domain/user.service.puml

  <b>주요 클래스</b>
  • UserService 클래스
  • User 인터페이스
  • CreateUserInput DTO
end note

note bottom of file_storage_component
  <b>🔍 Drill Down</b>
  → ../lv4-code/sample-domain/file-storage.service.puml

  <b>주요 클래스</b>
  • FileStorageService 클래스
  • FileMetadata 인터페이스
  • UploadFileInput DTO

  <b>보안 기능</b>
  • 파일 크기 제한 (10MB)
  • MIME 타입 검증
  • 사용자별 권한 관리
end note

note as SyncGuide #FFE0E0
  <b>⚠️  동기화 체크리스트</b>
  ====
  이 다이어그램 변경 시:

  ☐ lv4 다이어그램 변경 반영됨?
     • user.service.puml
     • notification.service.puml
     • file-storage.service.puml

  ☐ 새로운 컴포넌트 추가 시
     → Component 추가
     → lv2 (overview.puml) 설명 업데이트
     → lv4 다이어그램 생성

  ☐ 외부 API 추가/제거 시
     → System_Ext 추가/제거
     → lv2, lv1 동기화 확인
end note

@enduml

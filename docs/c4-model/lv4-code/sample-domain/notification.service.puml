@startuml
' ==============================================================================
' [Level 4] NotificationService - Class Diagram
' ==============================================================================
' Package: @pioncorp/sample-domain
' Description: 멀티채널 알림 발송 서비스 (Strategy Pattern)
'
' 🔗 코드 경로:
'    • packages/sample-domain/src/notification/notification.service.ts
'    • packages/sample-domain/src/notification/notification.types.ts
'
' 🔄 동기화 규칙:
'    ✅ 이 파일 변경 → lv3 (sample-domain.puml) "Notification Management" 확인
'    ✅ NotificationService 클래스 변경 시 이 다이어그램 업데이트 필수
'    ✅ 새로운 Provider 추가 시 notification-providers.puml도 업데이트
'
' 📍 변경 대상:
'    • NotificationService 클래스 (필드, 메서드)
'    • send*() 메서드 (sendEmail, sendSms, sendPush, sendKakao)
'    • Provider 필드 (*Provider)
'    • 카운터 필드 (*Count)
'
' 🔍 관련 다이어그램:
'    • notification-providers.puml (Provider 인터페이스/구현)
'
' ⬆️  Zoom Out: ../../lv3-components/sample-domain.puml
' ==============================================================================

skinparam classAttributeIconSize 0
skinparam classFontStyle bold
skinparam packageStyle rectangle
skinparam shadowing false
skinparam backgroundColor transparent

package "sample-domain" <<Rectangle>> #85BBF0 {

    class NotificationService <<singleton>> <<injectable>> {
        - logger: Logger
        - emailProvider: ConsoleEmailProvider
        - smsProvider: ConsoleSmsProvider
        - pushProvider: ConsolePushProvider
        - kakaoProvider: ConsoleKakaoProvider
        - emailCount: number
        - smsCount: number
        - pushCount: number
        - kakaoCount: number
        __constructor__
        + NotificationService(
            emailProvider: ConsoleEmailProvider,
            smsProvider: ConsoleSmsProvider,
            pushProvider: ConsolePushProvider,
            kakaoProvider: ConsoleKakaoProvider,
            logger: Logger
        )
        __email__
        + sendEmail(params: SendEmailParams): Promise<SendEmailResult>
        __sms__
        + sendSms(params: SendSmsParams): Promise<SendSmsResult>
        __push__
        + sendPush(params: SendPushParams): Promise<SendPushResult>
        __kakao__
        + sendKakao(params: SendKakaoParams): Promise<SendKakaoResult>
        __statistics__
        + getNotificationCount(): NotificationCount
        + resetNotificationCount(): void
    }

    ' --- Provider Interfaces ---

    interface EmailProvider {
        + send(params: SendEmailParams): Promise<SendEmailResult>
    }

    interface SmsProvider {
        + send(params: SendSmsParams): Promise<SendSmsResult>
    }

    interface PushProvider {
        + send(params: SendPushParams): Promise<SendPushResult>
    }

    interface KakaoProvider {
        + send(params: SendKakaoParams): Promise<SendKakaoResult>
    }

    ' --- Console Provider Implementations ---

    class ConsoleEmailProvider <<injectable>> {
        + send(params: SendEmailParams): Promise<SendEmailResult>
    }

    class ConsoleSmsProvider <<injectable>> {
        + send(params: SendSmsParams): Promise<SendSmsResult>
    }

    class ConsolePushProvider <<injectable>> {
        + send(params: SendPushParams): Promise<SendPushResult>
    }

    class ConsoleKakaoProvider <<injectable>> {
        + send(params: SendKakaoParams): Promise<SendKakaoResult>
    }

    ' --- Parameter Types ---

    class SendEmailParams <<interface>> {
        + to: string
        + subject: string
        + body: string
    }

    class SendSmsParams <<interface>> {
        + to: string
        + message: string
    }

    class SendPushParams <<interface>> {
        + deviceToken: string
        + title: string
        + body: string
        + data?: Record<string, unknown>
    }

    class SendKakaoParams <<interface>> {
        + to: string
        + templateCode: string
        + message: string
        + variables?: Record<string, string>
    }

    ' --- Result Types ---

    class SendEmailResult <<interface>> {
        + success: boolean
        + messageId?: string
        + error?: string
    }

    class SendSmsResult <<interface>> {
        + success: boolean
        + messageId?: string
        + error?: string
    }

    class SendPushResult <<interface>> {
        + success: boolean
        + messageId?: string
        + error?: string
    }

    class SendKakaoResult <<interface>> {
        + success: boolean
        + messageId?: string
        + error?: string
    }

    class NotificationCount <<interface>> {
        + email: number
        + sms: number
        + push: number
        + kakao: number
    }
}

' ==============================================================================
' Package: shared-core
' ==============================================================================

package "shared-core" <<Rectangle>> #85BBF0 {
    class Logger {
        + info(message: string, context?: object): void
        + error(message: string, context?: object): void
        + child(prefix: string): Logger
    }
}

' ==============================================================================
' Relationships - Strategy Pattern
' ==============================================================================

NotificationService -right-> Logger : <<uses>>

' Provider Dependencies (Constructor Injection)
NotificationService -down-> ConsoleEmailProvider : <<uses>>
NotificationService -down-> ConsoleSmsProvider : <<uses>>
NotificationService -down-> ConsolePushProvider : <<uses>>
NotificationService -down-> ConsoleKakaoProvider : <<uses>>

' Interface Implementation (FIX: use "..|>" not ".|>")
ConsoleEmailProvider ..|> EmailProvider : <<implements>>
ConsoleSmsProvider ..|> SmsProvider : <<implements>>
ConsolePushProvider ..|> PushProvider : <<implements>>
ConsoleKakaoProvider ..|> KakaoProvider : <<implements>>

' Method Parameters
NotificationService ..> SendEmailParams : <<accepts>>
NotificationService ..> SendSmsParams : <<accepts>>
NotificationService ..> SendPushParams : <<accepts>>
NotificationService ..> SendKakaoParams : <<accepts>>

' Method Returns
NotificationService ..> SendEmailResult : <<returns>>
NotificationService ..> SendSmsResult : <<returns>>
NotificationService ..> SendPushResult : <<returns>>
NotificationService ..> SendKakaoResult : <<returns>>
NotificationService ..> NotificationCount : <<returns>>

' Provider Methods
ConsoleEmailProvider ..> SendEmailParams : <<accepts>>
ConsoleEmailProvider ..> SendEmailResult : <<returns>>
ConsoleSmsProvider ..> SendSmsParams : <<accepts>>
ConsoleSmsProvider ..> SendSmsResult : <<returns>>
ConsolePushProvider ..> SendPushParams : <<accepts>>
ConsolePushProvider ..> SendPushResult : <<returns>>
ConsoleKakaoProvider ..> SendKakaoParams : <<accepts>>
ConsoleKakaoProvider ..> SendKakaoResult : <<returns>>

' ==============================================================================
' Notes
' ==============================================================================

note right of NotificationService #FFFFCC
  <b><size:14>Strategy Pattern</size></b>
  ---
  • Provider 인터페이스로 알림 채널 추상화
  • 생성자 주입으로 구현체 교체 가능
  • Console → AWS/Twilio/FCM 쉽게 전환

  <b><size:14>Validation</size></b>
  ---
  • Email: to, subject, body + @ 형식
  • SMS: to, message + phone 정규식
  • Push: deviceToken, title, body
  • Kakao: to, templateCode, message + phone 정규식

  <b><size:14>Error Handling</size></b>
  ---
  • 입력 검증 실패 → {success: false, error}
  • Provider 예외 → try-catch → Result 반환
  • 절대 throw 하지 않음
end note

note as ValidationDetails #FFFFCC
  <b><size:16>입력 검증 규칙</size></b>
  ====
  <b>sendEmail()</b>
  1. Required: to, subject, body
  2. Format: to.includes('@')

  <b>sendSms()</b>
  1. Required: to, message
  2. Format: /^[0-9+\-() ]+$/.test(to)

  <b>sendPush()</b>
  1. Required: deviceToken, title, body
  2. deviceToken은 문자열만 검증

  <b>sendKakao()</b>
  1. Required: to, templateCode, message
  2. Format: /^[0-9+\-() ]+$/.test(to)
end note

ValidationDetails .up. NotificationService

note as CounterBehavior #FFFFCC
  <b><size:16>카운터 동작</size></b>
  ====
  • 각 send*() 성공 시 카운터 증가
  • getNotificationCount()로 조회
  • resetNotificationCount()로 초기화
  • 테스트 검증 및 모니터링 용도
end note

CounterBehavior .down. NotificationService

' ==============================================================================
' DI Container
' ==============================================================================

class "DI Container\n(tsyringe)" as DIContainer <<singleton registry>> #85BBF0 {
  + resolve<T>(token: string): T
  + register<T>(token: string, provider: Provider<T>): void
}

DIContainer -down-> NotificationService : <<provides>>
DIContainer -down-> ConsoleEmailProvider : <<provides>>
DIContainer -down-> ConsoleSmsProvider : <<provides>>
DIContainer -down-> ConsolePushProvider : <<provides>>
DIContainer -down-> ConsoleKakaoProvider : <<provides>>
DIContainer -down-> Logger : <<provides>>

note left of DIContainer
  <b>Provider 교체</b>
  container.register(token,
    useClass: AwsSesEmailProvider)
end note

note as SyncGuide #FFE0E0
  <b>⚠️  동기화 체크리스트</b>
  ====
  이 다이어그램 변경 시:

  ☐ packages/sample-domain/src/notification/
     notification.service.ts 코드 동기화 확인

  ☐ 새로운 Provider 추가 시 (예: Slack)
     → sendSlack() 메서드 추가
     → slackProvider 필드 추가
     → slackCount 필드 추가
     → notification-providers.puml 업데이트
     → lv3 (sample-domain.puml) 업데이트
     → lv2, lv1 외부 시스템 확인

  ☐ Provider 인터페이스 변경 시
     notification.types.ts 확인
end note

@enduml

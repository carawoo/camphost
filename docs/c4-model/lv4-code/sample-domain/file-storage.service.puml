@startuml
' ==============================================================================
' [Level 4] FileStorageService - Class Diagram
' ==============================================================================
' Package: @pioncorp/sample-domain
' Description: 사용자 개인 파일 스토리지 서비스
'
' 🔗 코드 경로:
'    • packages/sample-domain/src/file-storage/file-storage.service.ts
'    • packages/sample-domain/src/file-storage/file-storage.types.ts
'
' 🔄 동기화 규칙:
'    ✅ 이 파일 변경 → lv3 (sample-domain.puml) "File Storage Management" 확인
'    ✅ FileStorageService 클래스 변경 시 이 다이어그램 업데이트 필수
'
' 📍 변경 대상:
'    • FileStorageService 클래스 (필드, 메서드)
'    • FileMetadata 인터페이스
'    • UploadFileInput, UpdateFileInput, FileListQuery DTO
'    • FileValidationError 에러 클래스
'
' ⬆️  Zoom Out: ../../lv3-components/sample-domain.puml
' ==============================================================================

skinparam classAttributeIconSize 0
skinparam classFontStyle bold
skinparam packageStyle rectangle
skinparam shadowing false
skinparam backgroundColor transparent

package "sample-domain" <<Rectangle>> #85BBF0 {

    class FileStorageService <<singleton>> <<injectable>> {
        - files: Map<string, StoredFile>
        - logger: Logger
        __constructor__
        + FileStorageService(logger: Logger)
        __methods__
        + uploadFile(userId: string, input: UploadFileInput): Promise<FileMetadata>
        + downloadFile(fileId: string, userId: string): Promise<DownloadResult | undefined>
        + listFiles(userId: string, query?: FileListQuery): Promise<FileMetadata[]>
        + updateFile(fileId: string, userId: string, input: UpdateFileInput): Promise<FileMetadata | undefined>
        + deleteFile(fileId: string, userId: string): Promise<boolean>
        __helpers__
        - validateFileSize(size: number): void
        - validateMimeType(mimeType: string): void
        - verifyOwnership(file: StoredFile, userId: string): void
        __storage__
        .. In-Memory Map ..
    }

    class FileMetadata <<interface>> {
        + id: string
        + userId: string
        + fileName: string
        + fileSize: number
        + mimeType: string
        + uploadedAt: Date
    }

    class UploadFileInput <<interface>> {
        + fileName: string
        + fileSize: number
        + mimeType: string
        + content: Buffer
    }

    class UpdateFileInput <<interface>> {
        + content: Buffer
    }

    class FileListQuery <<interface>> {
        + limit?: number
        + offset?: number
        + sortBy?: 'uploadedAt' | 'fileName' | 'fileSize'
        + order?: 'asc' | 'desc'
    }

    class StoredFile <<interface>> {
        + metadata: FileMetadata
        + content: Buffer
    }

    class FileValidationError <<error>> {
        + message: string
        + code: string
        __codes__
        • FILE_TOO_LARGE
        • INVALID_MIME_TYPE
        • FORBIDDEN
    }
}

package "shared-core" <<Rectangle>> #85BBF0 {
    class Logger {
        + info(message: string, context?: object): void
        + debug(message: string, context?: object): void
        + error(message: string, context?: object): void
        + child(prefix: string): Logger
    }
}

' ==============================================================================
' Relationships
' ==============================================================================

FileStorageService -right-> Logger : <<uses>>
FileStorageService .down.> FileMetadata : <<creates>>
FileStorageService .down.> FileMetadata : <<manages>>
FileStorageService .down.> UploadFileInput : <<accepts>>
FileStorageService .down.> UpdateFileInput : <<accepts>>
FileStorageService .down.> FileListQuery : <<accepts>>
FileStorageService ..> StoredFile : <<stores>>
FileStorageService ..> FileValidationError : <<throws>>

StoredFile *-- FileMetadata
StoredFile *-- "1" Buffer

' ==============================================================================
' Notes
' ==============================================================================

note right of FileStorageService #FFFFCC
  <b><size:14>Decorators</size></b>
  ---
  • singleton - Application-wide singleton
  • injectable - DI container injectable

  <b><size:14>Storage</size></b>
  ---
  • Map<string, StoredFile> (In-Memory)
  • Key: UUID v4 (fileId)
  • No persistence (dev/test only)

  <b><size:14>Lifecycle</size></b>
  ---
  • Created once per application
  • Resolved via tsyringe container
  • Auto-registered by decorators
end note

note bottom of FileMetadata #FFFFCC
  <b>UUID v4 기반 ID</b>
  uploadedAt: 자동 생성 (new Date())

  모든 파일은 userId로 소유자 추적
end note

note bottom of UploadFileInput #FFFFCC
  <b>DTO (Data Transfer Object)</b>

  파일 업로드 입력 데이터
  content: Buffer (파일 바이너리)
end note

note bottom of UpdateFileInput #FFFFCC
  <b>DTO (Data Transfer Object)</b>

  파일 덮어쓰기 입력 데이터
  메타데이터는 보존됨
end note

note bottom of FileListQuery #FFFFCC
  <b>DTO (Data Transfer Object)</b>

  파일 목록 조회 쿼리
  정렬 및 페이지네이션 지원
end note

note as MethodDetails #FFFFCC
  <b><size:16>메서드 상세</size></b>
  ====
  <b>uploadFile()</b>
  • 파일 크기 검증 (MAX_FILE_SIZE = 10MB)
  • MIME 타입 검증 (허용 목록)
  • UUID 자동 생성
  • uploadedAt 자동 설정
  • Map에 저장
  • Logger 기록 (info)

  <b>downloadFile()</b>
  • fileId로 조회
  • 권한 검증 (userId 일치)
  • 존재하지 않으면 undefined 반환
  • 권한 없으면 FileValidationError throw (403)
  • metadata + content 반환

  <b>listFiles()</b>
  • userId로 필터링
  • 정렬 (uploadedAt/fileName/fileSize)
  • 페이지네이션 (limit, offset)
  • Logger 기록 (info, count)

  <b>updateFile()</b>
  • fileId로 조회
  • 권한 검증 (userId 일치)
  • 파일 크기 검증
  • 메타데이터 보존 (fileName, mimeType, uploadedAt)
  • content 및 fileSize만 업데이트
  • Logger 기록 (info)

  <b>deleteFile()</b>
  • fileId로 조회
  • 권한 검증 (userId 일치)
  • Map.delete() 호출
  • Logger 기록 (info)
  • boolean 반환 (true/false)
end note

MethodDetails .up. FileStorageService

' ==============================================================================
' Constants
' ==============================================================================

note as Constants #E1F5FE
  <b><size:16>상수</size></b>
  ====
  <b>MAX_FILE_SIZE</b>
  • 10MB (10 * 1024 * 1024 bytes)

  <b>ALLOWED_MIME_TYPES</b>
  • 이미지: image/jpeg, image/png, image/gif, image/webp
  • PDF: application/pdf
  • 문서: application/msword, application/vnd.*, text/plain
end note

' ==============================================================================
' DI Container Relationship
' ==============================================================================

class "DI Container\n(tsyringe)" as DIContainer <<singleton registry>> #85BBF0 {
  + resolve<T>(token: string): T
  + register<T>(token: string, provider: Provider<T>): void
}

DIContainer -down-> FileStorageService : <<provides>>
DIContainer -down-> Logger : <<provides>>

note right of DIContainer
  <b>자동 등록</b>
  reflect-metadata + decorators

  <b>해소 방법</b>
  container.resolve(FileStorageService)
end note

note as SyncGuide #FFE0E0
  <b>⚠️  동기화 체크리스트</b>
  ====
  이 다이어그램 변경 시:

  ☐ packages/sample-domain/src/file-storage/
     file-storage.service.ts 코드 동기화 확인

  ☐ 새로운 메서드 추가 시
     lv3 (sample-domain.puml) "File Storage Management"
     설명 업데이트

  ☐ FileMetadata 인터페이스 필드 변경 시
     file-storage.types.ts 확인
end note

@enduml
